#!/usr/bin/env python3
"""
핵심 OCR 엔진 모듈 - Pororo OCR 최적화 완전 수정 버전
"""

import os
import logging
import traceback
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime

logger = logging.getLogger(__name__)

class OCREngine:
    """Pororo OCR 엔진 래퍼 클래스 - 완전 수정 버전"""

    def __init__(self, model: str = "brainocr", language: str = "ko"):
        self.model = model
        self.language = language
        self.ocr = None
        self._initialize_ocr()

    def _initialize_ocr(self):
        """OCR 모델 초기화"""
        try:
            from pororo import Pororo
            logger.info(f"🚀 Pororo OCR 초기화: {self.model} ({self.language})")
            
            self.ocr = Pororo(
                task="ocr",
                lang=self.language,
                model=self.model
            )
            logger.info(f"✅ OCR 엔진 초기화 성공")
            
        except ImportError:
            logger.error("❌ Pororo 라이브러리가 설치되지 않았습니다.")
            raise ImportError("Pororo library is not installed. Please install it with: pip install pororo")
        except Exception as e:
            logger.error(f"❌ OCR 엔진 초기화 실패: {str(e)}")
            logger.error(traceback.format_exc())
            raise

    def extract_text(self, image_path: str, detail: bool = True) -> List[Dict[str, Any]]:
        """이미지에서 텍스트 추출 - Pororo 최적화 버전"""
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"Image file not found: {image_path}")

        try:
            logger.info(f"🔍 OCR 처리: {os.path.basename(image_path)}")
            
            # Pororo OCR 실행 - detail=True로 모든 정보 획득
            result = self.ocr(image_path, detail=True)
            
            logger.debug(f"📋 OCR 원본 결과 타입: {type(result)}")
            logger.debug(f"📋 OCR 원본 결과: {result}")

            # Pororo 전용 결과 정규화
            normalized_results = self._normalize_pororo_results(result, image_path)

            logger.info(f"✅ 텍스트 추출 완료: {len(normalized_results)}개 영역")
            
            for i, region in enumerate(normalized_results[:3]):
                sample_text = region.get('text', '')[:100]
                logger.info(f"   영역 {i+1}: '{sample_text}'")

            return normalized_results

        except Exception as e:
            logger.error(f"❌ OCR 추출 실패: {image_path} - {str(e)}")
            logger.error(traceback.format_exc())
            return []

    def _normalize_pororo_results(self, raw_results: Any, image_path: str) -> List[Dict[str, Any]]:
        """Pororo OCR 결과 정규화 - 실제 구조 기반"""
        normalized = []
        
        logger.debug(f"🔧 정규화 시작 - 타입: {type(raw_results)}")
        
        if not raw_results:
            logger.warning("⚠️ OCR 결과가 비어있습니다")
            return normalized

        try:
            # Pororo OCR 결과 구조별 처리
            if isinstance(raw_results, dict):
                # detail=True 결과: {'description': [...], 'bounding_poly': [...]}
                if 'description' in raw_results and 'bounding_poly' in raw_results:
                    descriptions = raw_results['description']
                    bounding_polys = raw_results['bounding_poly']
                    
                    logger.debug(f"   descriptions: {len(descriptions)}개, bounding_polys: {len(bounding_polys)}개")
                    
                    for i, (desc, poly) in enumerate(zip(descriptions, bounding_polys)):
                        if desc and desc.strip():
                            # 바운딩 박스 추출
                            bbox = [0, 0, 0, 0]
                            vertices = poly.get('vertices', [])
                            if vertices and len(vertices) >= 2:
                                x_coords = [v.get('x', 0) for v in vertices]
                                y_coords = [v.get('y', 0) for v in vertices]
                                bbox = [min(x_coords), min(y_coords), max(x_coords), max(y_coords)]
                            
                            text_content = {
                                'id': i,
                                'text': desc.strip(),
                                'confidence': 0.95,  # Pororo는 일반적으로 신뢰도가 높음
                                'bbox': bbox,
                                'source_image': image_path,
                                'extracted_at': datetime.now().isoformat()
                            }
                            normalized.append(text_content)
                            logger.debug(f"   추가: '{desc.strip()[:50]}'")
                
                else:
                    # 다른 딕셔너리 구조
                    text_content = self._extract_text_from_dict(raw_results, image_path, 0)
                    if text_content:
                        normalized.append(text_content)
                        
            elif isinstance(raw_results, list):
                logger.debug(f"📊 리스트 결과 - 길이: {len(raw_results)}")
                
                for i, item in enumerate(raw_results):
                    if isinstance(item, tuple) and len(item) >= 2:
                        # (bbox, text, confidence) 구조
                        text = item[1] if len(item) > 1 else ""
                        confidence = item[2] if len(item) > 2 else 0.95
                        bbox_info = item[0] if len(item) > 0 else []
                        
                        if text and text.strip():
                            # 바운딩 박스 처리
                            bbox = [0, 0, 0, 0]
                            if bbox_info:
                                try:
                                    if isinstance(bbox_info[0], (list, tuple)):
                                        # [[x1,y1], [x2,y2], ...] 형태
                                        x_coords = [pt[0] for pt in bbox_info if len(pt) >= 2]
                                        y_coords = [pt[1] for pt in bbox_info if len(pt) >= 2]
                                        if x_coords and y_coords:
                                            bbox = [min(x_coords), min(y_coords), max(x_coords), max(y_coords)]
                                    else:
                                        # [x1, y1, x2, y2] 형태
                                        bbox = list(bbox_info[:4])
                                except:
                                    pass
                            
                            text_content = {
                                'id': i,
                                'text': text.strip(),
                                'confidence': float(confidence) if confidence else 0.95,
                                'bbox': bbox,
                                'source_image': image_path,
                                'extracted_at': datetime.now().isoformat()
                            }
                            normalized.append(text_content)
                            logger.debug(f"   추가: '{text.strip()[:50]}'")
                    
                    elif isinstance(item, dict):
                        text_content = self._extract_text_from_dict(item, image_path, i)
                        if text_content:
                            normalized.append(text_content)
                    
                    elif isinstance(item, str) and item.strip():
                        text_content = {
                            'id': i,
                            'text': item.strip(),
                            'confidence': 0.95,
                            'bbox': [0, 0, 0, 0],
                            'source_image': image_path,
                            'extracted_at': datetime.now().isoformat()
                        }
                        normalized.append(text_content)
                        logger.debug(f"   추가: '{item.strip()[:50]}'")
            
            elif isinstance(raw_results, str) and raw_results.strip():
                text_content = {
                    'id': 0,
                    'text': raw_results.strip(),
                    'confidence': 0.95,
                    'bbox': [0, 0, 0, 0],
                    'source_image': image_path,
                    'extracted_at': datetime.now().isoformat()
                }
                normalized.append(text_content)
                logger.debug(f"   문자열 추가: '{raw_results.strip()[:50]}'")
            
            else:
                logger.warning(f"⚠️ 알 수 없는 결과 형태: {type(raw_results)}")
                # 마지막 시도
                try:
                    str_result = str(raw_results).strip()
                    if str_result and str_result not in ['None', 'null', '[]', '{}']:
                        text_content = {
                            'id': 0,
                            'text': str_result,
                            'confidence': 0.5,
                            'bbox': [0, 0, 0, 0],
                            'source_image': image_path,
                            'extracted_at': datetime.now().isoformat()
                        }
                        normalized.append(text_content)
                        logger.debug(f"   변환 추가: '{str_result[:50]}'")
                except:
                    logger.error(f"❌ 결과 변환 실패: {type(raw_results)}")
        
        except Exception as e:
            logger.error(f"❌ 정규화 중 오류: {str(e)}")
            logger.error(traceback.format_exc())
        
        logger.info(f"🎯 정규화 완료: {len(normalized)}개 텍스트 영역")
        return normalized

    def _extract_text_from_dict(self, item: dict, image_path: str, index: int) -> Optional[Dict[str, Any]]:
        """딕셔너리에서 텍스트 추출"""
        try:
            text = ""
            confidence = 0.95
            bbox = [0, 0, 0, 0]
            
            # 텍스트 추출
            text_keys = ['description', 'text', 'word', 'content', 'ocr_text']
            for key in text_keys:
                if key in item and item[key]:
                    text = str(item[key]).strip()
                    break
            
            # 신뢰도 추출
            conf_keys = ['confidence', 'score', 'prob']
            for key in conf_keys:
                if key in item:
                    try:
                        confidence = float(item[key])
                        break
                    except:
                        continue
            
            # 바운딩 박스 추출
            if 'vertices' in item:
                vertices = item['vertices']
                if vertices:
                    try:
                        x_coords = [v.get('x', 0) for v in vertices if 'x' in v]
                        y_coords = [v.get('y', 0) for v in vertices if 'y' in v]
                        if x_coords and y_coords:
                            bbox = [min(x_coords), min(y_coords), max(x_coords), max(y_coords)]
                    except:
                        pass
            
            if text:
                return {
                    'id': index,
                    'text': text,
                    'confidence': confidence,
                    'bbox': bbox,
                    'source_image': image_path,
                    'extracted_at': datetime.now().isoformat()
                }
                
        except Exception as e:
            logger.debug(f"딕셔너리 추출 실패 {index}: {str(e)}")
        
        return None

    def batch_extract(self, image_paths: List[str], progress_callback: Optional[callable] = None) -> Dict[str, List[Dict[str, Any]]]:
        """배치 텍스트 추출"""
        results = {}
        total = len(image_paths)

        logger.info(f"🚀 배치 OCR 시작: {total}개 이미지")

        for i, image_path in enumerate(image_paths):
            try:
                logger.info(f"📝 처리: {i+1}/{total} - {os.path.basename(image_path)}")
                results[image_path] = self.extract_text(image_path)

                if progress_callback:
                    progress_callback(i + 1, total, image_path)

            except Exception as e:
                logger.error(f"❌ 배치 처리 실패 {image_path}: {str(e)}")
                results[image_path] = []

        successful = len([r for r in results.values() if r])
        logger.info(f"✅ 배치 OCR 완료: {successful}/{total} 성공")
        
        return results

    def get_supported_formats(self) -> List[str]:
        return ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']

    def validate_image(self, image_path: str) -> bool:
        if not os.path.exists(image_path):
            return False
        ext = os.path.splitext(image_path)[1].lower()
        return ext in self.get_supported_formats()

    def get_engine_info(self) -> Dict[str, Any]:
        return {
            'model': self.model,
            'language': self.language,
            'supported_formats': self.get_supported_formats(),
            'initialized': self.ocr is not None,
            'engine_type': 'Pororo OCR (Enhanced)',
            'version': 'Enhanced 1.0'
        }


class OCRResult:
    """OCR 결과 데이터 클래스"""

    def __init__(self, text_regions: List[Dict[str, Any]], source_image: str):
        self.text_regions = text_regions
        self.source_image = source_image
        self.extracted_at = datetime.now()

    @property
    def text_count(self) -> int:
        return len(self.text_regions)

    @property
    def combined_text(self) -> str:
        return '\n'.join(region['text'] for region in self.text_regions if region['text'].strip())

    @property
    def confidence_scores(self) -> List[float]:
        return [region['confidence'] for region in self.text_regions]

    @property
    def average_confidence(self) -> float:
        scores = self.confidence_scores
        return sum(scores) / len(scores) if scores else 0.0

    def get_high_confidence_text(self, threshold: float = 0.8) -> List[str]:
        return [
            region['text']
            for region in self.text_regions
            if region['confidence'] >= threshold and region['text'].strip()
        ]

    def to_dict(self) -> Dict[str, Any]:
        return {
            'source_image': self.source_image,
            'extracted_at': self.extracted_at.isoformat(),
            'text_count': self.text_count,
            'combined_text': self.combined_text,
            'average_confidence': self.average_confidence,
            'text_regions': self.text_regions
        }
